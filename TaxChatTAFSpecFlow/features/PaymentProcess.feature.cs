// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaxChatTAFSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Process the payment on the participant module")]
    public partial class ProcessThePaymentOnTheParticipantModuleFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "PaymentProcess.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Process the payment on the participant module", "\tIn order to validate the payment process on the participant module\r\n\tAs a partip" +
                    "ant\r\n\tI want to validate the payment functionality works properly", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate payment process on participant module without mark same mailing address")]
        [NUnit.Framework.CategoryAttribute("validatePaymentFunctionalityWithoutMarkSameMailingAddress")]
        [NUnit.Framework.TestCaseAttribute("Yes", "Bernie", "Jackson", "1", "No", "1", "299", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_cc_@globant.com", "No", "Yes", "No", "No", "No", "Married", "Yes", "Yes", "No", "No", "Colombia", "Medellin", "Medellin", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Allan", "Brandon", "1", "No", "1", "299", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_cc_@globant.com", "No", "Yes", "No", "No", "No", "Married", "Yes", "Yes", "No", "No", "United_States", "New_York", "Manhattan", "Yes", null)]
        public virtual void ValidatePaymentProcessOnParticipantModuleWithoutMarkSameMailingAddress(
                    string isB2B2CUser, 
                    string name, 
                    string lastName, 
                    string tile, 
                    string internalOption, 
                    string input, 
                    string expectedQuote, 
                    string complexityExpected, 
                    string consentAditionalQuestion, 
                    string consentMarried, 
                    string consentFinantialReport, 
                    string consentReportableTransaction, 
                    string isValidationSpigotGroup, 
                    string emailPattern, 
                    string isValidationTileByParts, 
                    string isMarriedOnBoarding, 
                    string spouseNotSsn, 
                    string isMarriedDependent, 
                    string markCompleteOptions, 
                    string maritalStatus, 
                    string hadDistributions, 
                    string directAndsameBankAccount, 
                    string checkMailedAndDirect, 
                    string isRandomUploadFile, 
                    string country, 
                    string stateSelect, 
                    string stateCompare, 
                    string isStateSelect, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validatePaymentFunctionalityWithoutMarkSameMailingAddress"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate payment process on participant module without mark same mailing address", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table28 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "lastName",
                            "tile",
                            "internalOption",
                            "input",
                            "emailPattern"});
                table28.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", emailPattern)});
#line 8
 testRunner.Given("The user have entered into onboarding option", ((string)(null)), table28, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table29 = new TechTalk.SpecFlow.Table(new string[] {
                            "tile",
                            "internalOption",
                            "input",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts"});
                table29.AddRow(new string[] {
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts)});
#line 11
 testRunner.When("He fills out the fields related to tax situation", ((string)(null)), table29, "When ");
#line hidden
                TechTalk.SpecFlow.Table table30 = new TechTalk.SpecFlow.Table(new string[] {
                            "consentAditionalQuestion",
                            "consentMarried",
                            "consentFinantialReport",
                            "consentReportableTransaction",
                            "isMarriedOnBoarding",
                            "country",
                            "stateSelect",
                            "isStateSelect"});
                table30.AddRow(new string[] {
                            string.Format("{0}", consentAditionalQuestion),
                            string.Format("{0}", consentMarried),
                            string.Format("{0}", consentFinantialReport),
                            string.Format("{0}", consentReportableTransaction),
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", country),
                            string.Format("{0}", stateSelect),
                            string.Format("{0}", isStateSelect)});
#line 14
 testRunner.And(string.Format("He fills out the fields in user creation page so to complete participant informat" +
                            "ion with the name {0} the lastname {1} the expectedquote {2} and depends of user" +
                            " {3} with the following consents", name, lastName, expectedQuote, isB2B2CUser), ((string)(null)), table30, "And ");
#line hidden
#line 17
 testRunner.And(string.Format("He confirms the e-mail sent with the email, the name {0} and the lastname {1} for" +
                            " the type of user {2}", name, lastName, isB2B2CUser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("The user have entered into participant page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.Then(string.Format("He enters into upload documents option to upload all required files {0}", isRandomUploadFile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table31 = new TechTalk.SpecFlow.Table(new string[] {
                            "typeDependent",
                            "firstNameDependent",
                            "lastNameDependent",
                            "dateOfBirth",
                            "ssn",
                            "dependentNotSsn",
                            "isMarriedOnBoarding",
                            "spouseNotSsn",
                            "isMarriedDependent",
                            "markCompleteOptions",
                            "maritalStatus",
                            "hadDistributions",
                            "directAndsameBankAccount",
                            "checkMailedAndDirect",
                            "isRandomUploadFile",
                            "isB2B2CUser"});
                table31.AddRow(new string[] {
                            "son",
                            "Jhon",
                            "Kent",
                            "December,7,1962",
                            "123456789",
                            "Yes",
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", spouseNotSsn),
                            string.Format("{0}", isMarriedDependent),
                            string.Format("{0}", markCompleteOptions),
                            string.Format("{0}", maritalStatus),
                            string.Format("{0}", hadDistributions),
                            string.Format("{0}", directAndsameBankAccount),
                            string.Format("{0}", checkMailedAndDirect),
                            string.Format("{0}", isRandomUploadFile),
                            string.Format("{0}", isB2B2CUser)});
#line 20
 testRunner.And("Is validated and fill out all the information on the profile section", ((string)(null)), table31, "And ");
#line hidden
                TechTalk.SpecFlow.Table table32 = new TechTalk.SpecFlow.Table(new string[] {
                            "isCreatedUser"});
                table32.AddRow(new string[] {
                            "No"});
#line 23
 testRunner.When(string.Format("The preparer searches the participant user with the name {0} and complete the pro" +
                            "cess until return release state", lastName), ((string)(null)), table32, "When ");
#line hidden
                TechTalk.SpecFlow.Table table33 = new TechTalk.SpecFlow.Table(new string[] {
                            "isCreatedUser",
                            "country",
                            "name",
                            "lastName",
                            "expectedQuote"});
                table33.AddRow(new string[] {
                            "No",
                            string.Format("{0}", country),
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", expectedQuote)});
#line 26
 testRunner.And("The participant user process the payment", ((string)(null)), table33, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate payment process on participant module marking same mailing address")]
        [NUnit.Framework.CategoryAttribute("validatePaymentFunctionalityMarkingSameMailingAddress")]
        [NUnit.Framework.TestCaseAttribute("Yes", "Jeffrey", "William", "1", "No", "1", "299", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_cc_@globant.com", "No", "Yes", "No", "No", "No", "Married", "Yes", "Yes", "No", "No", "Colombia", "Medellin", "Medellin", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Carl", "Heighs", "1", "No", "1", "299", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_cc_@globant.com", "No", "Yes", "No", "No", "No", "Married", "Yes", "Yes", "No", "No", "United_States", "New_York", "Manhattan", "Yes", null)]
        public virtual void ValidatePaymentProcessOnParticipantModuleMarkingSameMailingAddress(
                    string isB2B2CUser, 
                    string name, 
                    string lastName, 
                    string tile, 
                    string internalOption, 
                    string input, 
                    string expectedQuote, 
                    string complexityExpected, 
                    string consentAditionalQuestion, 
                    string consentMarried, 
                    string consentFinantialReport, 
                    string consentReportableTransaction, 
                    string isValidationSpigotGroup, 
                    string emailPattern, 
                    string isValidationTileByParts, 
                    string isMarriedOnBoarding, 
                    string spouseNotSsn, 
                    string isMarriedDependent, 
                    string markCompleteOptions, 
                    string maritalStatus, 
                    string hadDistributions, 
                    string directAndsameBankAccount, 
                    string checkMailedAndDirect, 
                    string isRandomUploadFile, 
                    string country, 
                    string stateSelect, 
                    string stateCompare, 
                    string isStateSelect, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validatePaymentFunctionalityMarkingSameMailingAddress"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate payment process on participant module marking same mailing address", null, @__tags);
#line 36
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table34 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "lastName",
                            "tile",
                            "internalOption",
                            "input",
                            "emailPattern"});
                table34.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", emailPattern)});
#line 37
 testRunner.Given("The user have entered into onboarding option", ((string)(null)), table34, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table35 = new TechTalk.SpecFlow.Table(new string[] {
                            "tile",
                            "internalOption",
                            "input",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts"});
                table35.AddRow(new string[] {
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts)});
#line 40
 testRunner.When("He fills out the fields related to tax situation", ((string)(null)), table35, "When ");
#line hidden
                TechTalk.SpecFlow.Table table36 = new TechTalk.SpecFlow.Table(new string[] {
                            "consentAditionalQuestion",
                            "consentMarried",
                            "consentFinantialReport",
                            "consentReportableTransaction",
                            "isMarriedOnBoarding",
                            "country",
                            "stateSelect",
                            "isStateSelect"});
                table36.AddRow(new string[] {
                            string.Format("{0}", consentAditionalQuestion),
                            string.Format("{0}", consentMarried),
                            string.Format("{0}", consentFinantialReport),
                            string.Format("{0}", consentReportableTransaction),
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", country),
                            string.Format("{0}", stateSelect),
                            string.Format("{0}", isStateSelect)});
#line 43
 testRunner.And(string.Format("He fills out the fields in user creation page so to complete participant informat" +
                            "ion with the name {0} the lastname {1} the expectedquote {2} and depends of user" +
                            " {3} with the following consents", name, lastName, expectedQuote, isB2B2CUser), ((string)(null)), table36, "And ");
#line hidden
#line 46
 testRunner.And(string.Format("He confirms the e-mail sent with the email, the name {0} and the lastname {1} for" +
                            " the type of user {2}", name, lastName, isB2B2CUser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 47
 testRunner.And("The user have entered into participant page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 48
 testRunner.Then(string.Format("He enters into upload documents option to upload all required files {0}", isRandomUploadFile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table37 = new TechTalk.SpecFlow.Table(new string[] {
                            "typeDependent",
                            "firstNameDependent",
                            "lastNameDependent",
                            "dateOfBirth",
                            "ssn",
                            "dependentNotSsn",
                            "isMarriedOnBoarding",
                            "spouseNotSsn",
                            "isMarriedDependent",
                            "markCompleteOptions",
                            "maritalStatus",
                            "hadDistributions",
                            "directAndsameBankAccount",
                            "checkMailedAndDirect",
                            "isRandomUploadFile",
                            "isB2B2CUser"});
                table37.AddRow(new string[] {
                            "son",
                            "Jhon",
                            "Kent",
                            "December,7,1962",
                            "123456789",
                            "Yes",
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", spouseNotSsn),
                            string.Format("{0}", isMarriedDependent),
                            string.Format("{0}", markCompleteOptions),
                            string.Format("{0}", maritalStatus),
                            string.Format("{0}", hadDistributions),
                            string.Format("{0}", directAndsameBankAccount),
                            string.Format("{0}", checkMailedAndDirect),
                            string.Format("{0}", isRandomUploadFile),
                            string.Format("{0}", isB2B2CUser)});
#line 49
 testRunner.And("Is validated and fill out all the information on the profile section", ((string)(null)), table37, "And ");
#line hidden
                TechTalk.SpecFlow.Table table38 = new TechTalk.SpecFlow.Table(new string[] {
                            "isCreatedUser"});
                table38.AddRow(new string[] {
                            "No"});
#line 52
 testRunner.When(string.Format("The preparer searches the participant user with the name {0} and complete the pro" +
                            "cess until return release state", lastName), ((string)(null)), table38, "When ");
#line hidden
                TechTalk.SpecFlow.Table table39 = new TechTalk.SpecFlow.Table(new string[] {
                            "isCreatedUser",
                            "country",
                            "name",
                            "lastName",
                            "expectedQuote"});
                table39.AddRow(new string[] {
                            "No",
                            string.Format("{0}", country),
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", expectedQuote)});
#line 55
 testRunner.And("The participant user process the payment marking mailing address", ((string)(null)), table39, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
