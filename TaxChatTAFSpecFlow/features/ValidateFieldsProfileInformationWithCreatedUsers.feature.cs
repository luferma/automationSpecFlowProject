// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaxChatTAFSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Validate different options and information on profile module with users previousl" +
        "y created")]
    public partial class ValidateDifferentOptionsAndInformationOnProfileModuleWithUsersPreviouslyCreatedFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ValidateFieldsProfileInformationWithCreatedUsers.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Validate different options and information on profile module with users previousl" +
                    "y created", "\tIn order to validate the diffent options and information\r\n\tAs a partipant user\r\n" +
                    "\tI want to validate the different options and information on profile module", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate with users previously created the medical expenses field on profile modu" +
            "le")]
        [NUnit.Framework.CategoryAttribute("validateMedicalExpensesFieldWithCreatedUsers")]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+sub_cc_10804@globant.com", "Abcd1234GLB", "Yes", "No", "No", "Married", null)]
        public virtual void ValidateWithUsersPreviouslyCreatedTheMedicalExpensesFieldOnProfileModule(string email, string password, string isMarriedOnBoarding, string spouseNotSsn, string isMarriedDependent, string maritalStatus, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validateMedicalExpensesFieldWithCreatedUsers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate with users previously created the medical expenses field on profile modu" +
                    "le", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("The user have entered into participant page with a created user {0} {1}", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table74 = new TechTalk.SpecFlow.Table(new string[] {
                            "typeDependent",
                            "firstNameDependent",
                            "lastNameDependent",
                            "dateOfBirth",
                            "ssn",
                            "dependentNotSsn",
                            "isMarriedOnBoarding",
                            "spouseNotSsn",
                            "maritalStatus",
                            "isB2B2CUser",
                            "isCreatedUser"});
                table74.AddRow(new string[] {
                            "son",
                            "Jhon",
                            "Kent",
                            "December,7,1962",
                            "123456789",
                            "Yes",
                            "isMarriedDependent>",
                            string.Format("{0}", spouseNotSsn),
                            string.Format("{0}", maritalStatus),
                            "<isB2B2CUser>",
                            "Yes"});
#line 9
 testRunner.Then("Is validated and fill out all the information to validate the medical expenses fi" +
                        "eld", ((string)(null)), table74, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate with user previously created the edition of country in all documents sub" +
            "mitted status")]
        [NUnit.Framework.CategoryAttribute("validateEditCountryAllDocsSubmittedStatusWithCreatedUsers")]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+sub_cc_85637@globant.com", "Abcd1234GLB", "Yes", "No", "No", "No", "Married", "Yes", "Yes", "No", "No", null)]
        public virtual void ValidateWithUserPreviouslyCreatedTheEditionOfCountryInAllDocumentsSubmittedStatus(string email, string password, string isMarriedOnBoarding, string spouseNotSsn, string isMarriedDependent, string markCompleteOptions, string maritalStatus, string hadDistributions, string directAndsameBankAccount, string checkMailedAndDirect, string isRandomUploadFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validateEditCountryAllDocsSubmittedStatusWithCreatedUsers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate with user previously created the edition of country in all documents sub" +
                    "mitted status", null, @__tags);
#line 18
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 19
 testRunner.Given(string.Format("The user have entered into participant page with a created user {0} {1}", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.When(string.Format("He enters into upload documents option with an user created to upload all require" +
                            "d files {0}", isRandomUploadFile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table75 = new TechTalk.SpecFlow.Table(new string[] {
                            "typeDependent",
                            "firstNameDependent",
                            "lastNameDependent",
                            "dateOfBirth",
                            "ssn",
                            "dependentNotSsn",
                            "isMarriedOnBoarding",
                            "spouseNotSsn",
                            "isMarriedDependent",
                            "markCompleteOptions",
                            "maritalStatus",
                            "hadDistributions",
                            "directAndsameBankAccount",
                            "checkMailedAndDirect",
                            "isRandomUploadFile",
                            "isB2B2CUser",
                            "isCreatedUser"});
                table75.AddRow(new string[] {
                            "son",
                            "Jhon",
                            "Kent",
                            "December,7,1962",
                            "123456789",
                            "Yes",
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", spouseNotSsn),
                            string.Format("{0}", isMarriedDependent),
                            string.Format("{0}", markCompleteOptions),
                            string.Format("{0}", maritalStatus),
                            string.Format("{0}", hadDistributions),
                            string.Format("{0}", directAndsameBankAccount),
                            string.Format("{0}", checkMailedAndDirect),
                            string.Format("{0}", isRandomUploadFile),
                            "Yes",
                            "Yes"});
#line 21
 testRunner.Then("Is validated and fill out all the information on the profile section", ((string)(null)), table75, "Then ");
#line hidden
#line 24
 testRunner.And("Is validated the country edition with all document submitted status", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate with user previously created that he can not edit the country fields whe" +
            "n rearch the status all documents submitted confirmed")]
        [NUnit.Framework.CategoryAttribute("validateDoesNotEditCountryAllDocsConfirmedStatusWithCreatedUsers")]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+sub_cc_66859@globant.com", "Abcd1234GLB", "Yes", "No", "No", "No", "Married", "Yes", "Yes", "No", "No", null)]
        public virtual void ValidateWithUserPreviouslyCreatedThatHeCanNotEditTheCountryFieldsWhenRearchTheStatusAllDocumentsSubmittedConfirmed(string email, string password, string isMarriedOnBoarding, string spouseNotSsn, string isMarriedDependent, string markCompleteOptions, string maritalStatus, string hadDistributions, string directAndsameBankAccount, string checkMailedAndDirect, string isRandomUploadFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validateDoesNotEditCountryAllDocsConfirmedStatusWithCreatedUsers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate with user previously created that he can not edit the country fields whe" +
                    "n rearch the status all documents submitted confirmed", null, @__tags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 32
 testRunner.Given(string.Format("The user have entered into participant page with a created user {0} {1}", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 33
 testRunner.When(string.Format("He enters into upload documents option with an user created to upload all require" +
                            "d files {0}", isRandomUploadFile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table76 = new TechTalk.SpecFlow.Table(new string[] {
                            "typeDependent",
                            "firstNameDependent",
                            "lastNameDependent",
                            "dateOfBirth",
                            "ssn",
                            "dependentNotSsn",
                            "isMarriedOnBoarding",
                            "spouseNotSsn",
                            "isMarriedDependent",
                            "markCompleteOptions",
                            "maritalStatus",
                            "hadDistributions",
                            "directAndsameBankAccount",
                            "checkMailedAndDirect",
                            "isRandomUploadFile",
                            "isB2B2CUser",
                            "isCreatedUser"});
                table76.AddRow(new string[] {
                            "son",
                            "Jhon",
                            "Kent",
                            "December,7,1962",
                            "123456789",
                            "Yes",
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", spouseNotSsn),
                            string.Format("{0}", isMarriedDependent),
                            string.Format("{0}", markCompleteOptions),
                            string.Format("{0}", maritalStatus),
                            string.Format("{0}", hadDistributions),
                            string.Format("{0}", directAndsameBankAccount),
                            string.Format("{0}", checkMailedAndDirect),
                            string.Format("{0}", isRandomUploadFile),
                            "Yes",
                            "Yes"});
#line 34
 testRunner.Then("Is validated and fill out all the information on the profile section", ((string)(null)), table76, "Then ");
#line hidden
                TechTalk.SpecFlow.Table table77 = new TechTalk.SpecFlow.Table(new string[] {
                            "isCreatedUser"});
                table77.AddRow(new string[] {
                            "Yes"});
#line 37
 testRunner.When("The preparer searches the participant user with the name <lastName> and confirms " +
                        "the documents", ((string)(null)), table77, "When ");
#line hidden
                TechTalk.SpecFlow.Table table78 = new TechTalk.SpecFlow.Table(new string[] {
                            "isCreatedUser"});
                table78.AddRow(new string[] {
                            "Yes"});
#line 40
 testRunner.Then("The user changes to participant app to edit the country information", ((string)(null)), table78, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
