// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaxChatTAFSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Validate the fields country and state for the participant")]
    public partial class ValidateTheFieldsCountryAndStateForTheParticipantFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CompleteAndValidateCountryState.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Validate the fields country and state for the participant", "\tIn order to validate the fields country and state on participant application\r\n\tA" +
                    "s a partipant user\r\n\tI want to validate the correct entry of the fields country " +
                    "and state", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate the correct entry of country and state")]
        [NUnit.Framework.CategoryAttribute("validateCountryUnitedStatesAndState")]
        [NUnit.Framework.TestCaseAttribute("Yes", "Bernie", "Jackson", "1", "No", "0", "199", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_cc_@globant.com", "No", "Yes", "No", "United_States", "New_York", "NY", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Richard", "Hendrinks", "1", "No", "0", "199", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_cc_@globant.com", "No", "Yes", "No", "Colombia", "Medellin", "Medellin", "No", null)]
        public virtual void ValidateTheCorrectEntryOfCountryAndState(
                    string isB2B2CUser, 
                    string name, 
                    string lastName, 
                    string tile, 
                    string internalOption, 
                    string input, 
                    string expectedQuote, 
                    string complexityExpected, 
                    string consentAditionalQuestion, 
                    string consentMarried, 
                    string consentFinantialReport, 
                    string consentReportableTransaction, 
                    string isValidationSpigotGroup, 
                    string emailPattern, 
                    string isValidationTileByParts, 
                    string isMarriedOnBoarding, 
                    string isRandomUploadFile, 
                    string country, 
                    string stateSelect, 
                    string stateCompare, 
                    string isStateSelect, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validateCountryUnitedStatesAndState"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate the correct entry of country and state", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "lastName",
                            "tile",
                            "internalOption",
                            "input",
                            "emailPattern"});
                table4.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", emailPattern)});
#line 8
 testRunner.Given("The user have entered into onboarding option", ((string)(null)), table4, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "tile",
                            "internalOption",
                            "input",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts"});
                table5.AddRow(new string[] {
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts)});
#line 11
 testRunner.When("He fills out the fields related to tax situation", ((string)(null)), table5, "When ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "consentAditionalQuestion",
                            "consentMarried",
                            "consentFinantialReport",
                            "consentReportableTransaction",
                            "isMarriedOnBoarding",
                            "country",
                            "stateSelect",
                            "isStateSelect"});
                table6.AddRow(new string[] {
                            string.Format("{0}", consentAditionalQuestion),
                            string.Format("{0}", consentMarried),
                            string.Format("{0}", consentFinantialReport),
                            string.Format("{0}", consentReportableTransaction),
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", country),
                            string.Format("{0}", stateSelect),
                            string.Format("{0}", isStateSelect)});
#line 14
 testRunner.And(string.Format("He fills out the fields in user creation page so to complete participant informat" +
                            "ion with the name {0} the lastname {1} the expectedquote {2} and depends of user" +
                            " {3} with the following consents", name, lastName, expectedQuote, isB2B2CUser), ((string)(null)), table6, "And ");
#line hidden
#line 17
 testRunner.And(string.Format("He confirms the e-mail sent with the email, the name {0} and the lastname {1} for" +
                            " the type of user {2}", name, lastName, isB2B2CUser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("The user have entered into participant page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "country",
                            "stateCompare",
                            "isStateSelect"});
                table7.AddRow(new string[] {
                            string.Format("{0}", country),
                            string.Format("{0}", stateCompare),
                            string.Format("{0}", isStateSelect)});
#line 19
 testRunner.Then("Is validated the correct entry of country and state fields on the profile section" +
                        "", ((string)(null)), table7, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate the state list depends on country selected")]
        [NUnit.Framework.CategoryAttribute("validateStateListForOthersCountries")]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat361@globant.com", "Abcd1234GLB", "Yes", "No", "No", "Yes", "Married", "Yes", "Yes", "No", "No", "United_States", "NY", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat589@globant.com", "Abcd1234GLB", "Yes", "No", "No", "Yes", "Married", "Yes", "Yes", "No", "No", "Canada", "Quebec", "No", null)]
        public virtual void ValidateTheStateListDependsOnCountrySelected(string email, string password, string isMarriedOnBoarding, string spouseNotSsn, string isMarriedDependent, string markCompleteOptions, string maritalStatus, string hadDistributions, string directAndsameBankAccount, string checkMailedAndDirect, string isRandomUploadFile, string country, string stateSelect, string isCountryUs, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validateStateListForOthersCountries"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate the state list depends on country selected", null, @__tags);
#line 29
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 30
 testRunner.Given(string.Format("The user have entered into participant page with a created user {0} {1}", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "country",
                            "stateSelect",
                            "isCountryUs"});
                table8.AddRow(new string[] {
                            "United_States",
                            "NY",
                            "Yes"});
                table8.AddRow(new string[] {
                            "Canada",
                            "Quebec",
                            "No"});
                table8.AddRow(new string[] {
                            "China",
                            "Jura",
                            "No"});
                table8.AddRow(new string[] {
                            "India",
                            "Delhi",
                            "No"});
                table8.AddRow(new string[] {
                            "Belgium",
                            "Brussels",
                            "No"});
                table8.AddRow(new string[] {
                            "Germany",
                            "Berlin",
                            "No"});
                table8.AddRow(new string[] {
                            "Japan",
                            "Tokyo",
                            "No"});
                table8.AddRow(new string[] {
                            string.Format("{0}", country),
                            string.Format("{0}", stateSelect),
                            string.Format("{0}", isCountryUs)});
#line 31
 testRunner.When("Are validated the countries with related states", ((string)(null)), table8, "When ");
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "country",
                            "stateSelect",
                            "email",
                            "isCreatedUser",
                            "isCountryUs"});
                table9.AddRow(new string[] {
                            string.Format("{0}", country),
                            string.Format("{0}", stateSelect),
                            string.Format("{0}", email),
                            "Yes",
                            string.Format("{0}", isCountryUs)});
#line 41
 testRunner.And("The user have entered into preparer page and validate the information for the cou" +
                        "ntry and state", ((string)(null)), table9, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
