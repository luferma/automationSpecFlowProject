// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaxChatTAFSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Onboarding user")]
    public partial class OnboardingUserFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "OnboardingUser.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Onboarding user", "\tIn order to create an EY account for enter into application taxChat\r\n\tAs a parti" +
                    "pant user\r\n\tI want to do the process to obtain an application username and passw" +
                    "ord", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Onboarding B2B2C with email confirmation")]
        [NUnit.Framework.CategoryAttribute("onboardingConfirmationEmail")]
        [NUnit.Framework.TestCaseAttribute("Yes", "Clark", "Barkley", "0", "No", "0", "199", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Edward", "Pierce", "1", "No", "0", "199", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Janet", "Damita", "1", "Yes", "0", "224", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Nicholas", "Barkely", "1", "No", "1", "299", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "John", "Martin", "1", "Yes", "1", "324", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Mariah", "Carey", "2", "", "", "224", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Thomas", "Mottola", "3", "", "1", "319", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Gloria", "Fajardo", "3", "Personal Use", "1", "369", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Joseph", "Adams", "3", "Bought", "1", "319", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Kelly", "Clarkson", "3", "Sold", "1", "419", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Simon", "Fuller", "4", "", "", "349", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Nicolas", "Cappola", "5", "", "2", "229", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Albert", "Cappola", "5", "", "1", "214", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Patricia", "Arquette", "6", "Investment income through US", "", "199", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Thomas", "Jane", "6", "Foreign rental", "", "399", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Phil", "Joanou", "6", "Foreign mutual funds or similar investments", "", "399", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Edward", "Allen", "6", "Direct investment in a foreign corporation or partnership", "", "1199", "Platinum", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Amy", "Madigan", "6", "Form 2555", "", "699", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Beth", "Dziewion", "6", "First year filing a US", "", "249", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Wendell", "Pierce", "7", "", "1", "259", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Denzel", "Washington", "10", "sale or exchange", "", "299", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Donald", "Trump", "10", "purchase", "", "249", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Hilary", "Clinton", "10", "gifts or donations", "", "249", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Laura", "Bush", "10", "mining", "", "299", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Mary", "Perry", "10", "not reported", "", "299", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Cecilia", "Abbott", "10", "FIFO", "", "199", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Geoffrey", "Hinton", "10", "lending arrangement", "", "699", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Edward", "Pierce", "10", "ICO SAFT STO", "", "699", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Deborah", "Unger", "10", "CFDs", "", "699", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Michael", "Gray", "10", "peer-to-peer", "", "299", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Jhon", "Jackson", "10", "vehicle", "", "449", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Jeanne", "Horn", "9", "make contributions", "", "199", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Mandel", "Patinkin", "9", "rollover or conversion", "", "224", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Vanessa", "Williams", "9", "distribution", "", "199", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Clara", "Lions", "9", "none", "", "199", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Katherine", "Heigl", "11", "Do you have W-2 income", "", "199", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Chyler", "Leigh", "11", "Does your spouse have", "", "199", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Sarah", "Drew", "11", "Does your or your spouse\'s W-2 more than 3 States", "", "199", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Mike", "Miller", "8", "Student loan interest", "", "224", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Robert", "Thompson", "8", "Tuition expenses", "", "249", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", null)]
        public virtual void OnboardingB2B2CWithEmailConfirmation(
                    string isB2B2CUser, 
                    string name, 
                    string lastName, 
                    string tile, 
                    string internalOption, 
                    string input, 
                    string expectedQuote, 
                    string complexityExpected, 
                    string consentAditionalQuestion, 
                    string consentMarried, 
                    string consentFinantialReport, 
                    string consentReportableTransaction, 
                    string isValidationSpigotGroup, 
                    string emailPattern, 
                    string isValidationTileByParts, 
                    string isMarriedOnBoarding, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "onboardingConfirmationEmail"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Onboarding B2B2C with email confirmation", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table24 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "lastName",
                            "tile",
                            "internalOption",
                            "input",
                            "emailPattern"});
                table24.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", emailPattern)});
#line 8
 testRunner.Given("The user have entered into onboarding option", ((string)(null)), table24, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table25 = new TechTalk.SpecFlow.Table(new string[] {
                            "tile",
                            "internalOption",
                            "input",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts"});
                table25.AddRow(new string[] {
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts)});
#line 11
 testRunner.When("He fills out the fields related to tax situation", ((string)(null)), table25, "When ");
#line hidden
                TechTalk.SpecFlow.Table table26 = new TechTalk.SpecFlow.Table(new string[] {
                            "consentAditionalQuestion",
                            "consentMarried",
                            "consentFinantialReport",
                            "consentReportableTransaction",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts",
                            "isMarriedOnBoarding"});
                table26.AddRow(new string[] {
                            string.Format("{0}", consentAditionalQuestion),
                            string.Format("{0}", consentMarried),
                            string.Format("{0}", consentFinantialReport),
                            string.Format("{0}", consentReportableTransaction),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts),
                            string.Format("{0}", isMarriedOnBoarding)});
#line 14
 testRunner.And(string.Format("He fills out the fields in user creation page with the name {0} the lastname {1} " +
                            "the expectedquote {2} and depends of user {3} with the following consents", name, lastName, expectedQuote, isB2B2CUser), ((string)(null)), table26, "And ");
#line hidden
#line 17
 testRunner.And(string.Format("He confirms the e-mail sent with the email, the name {0} and the lastname {1} for" +
                            " the type of user {2}", name, lastName, isB2B2CUser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 18
 testRunner.And("The user have entered into participant page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 19
 testRunner.And(string.Format("The preparer searches the participant user and validates the complexity with the " +
                            "email preparer, the pass preparer and the name {0}", lastName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table27 = new TechTalk.SpecFlow.Table(new string[] {
                            "complexityExpected"});
                table27.AddRow(new string[] {
                            string.Format("{0}", complexityExpected)});
#line 20
 testRunner.Then("The user should see the correct complexity", ((string)(null)), table27, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
