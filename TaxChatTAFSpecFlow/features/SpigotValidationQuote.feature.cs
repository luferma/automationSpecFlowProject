// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaxChatTAFSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Spigot group quote validation")]
    public partial class SpigotGroupQuoteValidationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "SpigotValidationQuote.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Spigot group quote validation", "\tIn order to validate the quote of every spigot group\r\n\tAs a partipant user\r\n\tI w" +
                    "ant to validate the spigot group quote selecting all the tiles by SpigotGroup an" +
                    "d enter the email pattern related", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Spigot group quote validation")]
        [NUnit.Framework.CategoryAttribute("spigotGroupValidationQuote")]
        [NUnit.Framework.TestCaseAttribute("Yes", "Edward", "Pierce", "1", "No", "1", "5144", "Bronze", "No", "No", "No", "No", "Yes", "taxchat+sub_cc_@globant.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Janet", "Damita", "1", "No", "1", "5244", "Bronze", "No", "No", "No", "No", "Yes", "taxchat@jpmchase.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "John", "Martin", "1", "No", "1", "5124", "Bronze", "No", "No", "No", "No", "Yes", "taxchat@anes.upmc.edu", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Mariah", "Carey", "1", "No", "1", "5144", "Bronze", "No", "No", "No", "No", "Yes", "taxchat@henkel.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Thomas", "Mottola", "1", "No", "1", "5144", "Bronze", "No", "No", "No", "No", "Yes", "taxchat@pfizer.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Gloria", "Fajardo", "1", "No", "1", "5144", "Bronze", "No", "No", "No", "No", "Yes", "taxchat+sub_pd_@iinteractive.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Joseph", "Adams", "1", "No", "1", "4957", "Bronze", "No", "No", "No", "No", "Yes", "taxchat+con_st@hotmail.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Kelly", "Clarkson", "1", "No", "1", "5124", "Bronze", "No", "No", "No", "No", "Yes", "taxchat@bestbuy.com", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Simon", "Fuller", "1,2,3,11", "No", "1", "545", "Bronze", "No", "No", "No", "No", "No", "taxchat@hsbcX0lvf.com", "Yes", "No", null)]
        public virtual void SpigotGroupQuoteValidation(
                    string isB2B2CUser, 
                    string name, 
                    string lastName, 
                    string tile, 
                    string internalOption, 
                    string input, 
                    string expectedQuote, 
                    string complexityExpected, 
                    string consentAditionalQuestion, 
                    string consentMarried, 
                    string consentFinantialReport, 
                    string consentReportableTransaction, 
                    string isValidationSpigotGroup, 
                    string emailPattern, 
                    string isValidationTileByParts, 
                    string isMarriedOnBoarding, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "spigotGroupValidationQuote"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Spigot group quote validation", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table40 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "lastName",
                            "tile",
                            "internalOption",
                            "input",
                            "emailPattern",
                            "isValidationSpigotGroup"});
                table40.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", emailPattern),
                            string.Format("{0}", isValidationSpigotGroup)});
#line 8
 testRunner.Given("The user have entered into onboarding option", ((string)(null)), table40, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table41 = new TechTalk.SpecFlow.Table(new string[] {
                            "tile",
                            "internalOption",
                            "input",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts"});
                table41.AddRow(new string[] {
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts)});
#line 11
 testRunner.When("He fills out the fields related to tax situation", ((string)(null)), table41, "When ");
#line hidden
                TechTalk.SpecFlow.Table table42 = new TechTalk.SpecFlow.Table(new string[] {
                            "consentAditionalQuestion",
                            "consentMarried",
                            "consentFinantialReport",
                            "consentReportableTransaction",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts",
                            "isMarriedOnBoarding"});
                table42.AddRow(new string[] {
                            string.Format("{0}", consentAditionalQuestion),
                            string.Format("{0}", consentMarried),
                            string.Format("{0}", consentFinantialReport),
                            string.Format("{0}", consentReportableTransaction),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts),
                            string.Format("{0}", isMarriedOnBoarding)});
#line 14
 testRunner.And(string.Format("He fills out the fields in user creation page with the name {0} the lastname {1} " +
                            "the expectedquote {2} and depends of user {3} with the following consents", name, lastName, expectedQuote, isB2B2CUser), ((string)(null)), table42, "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
