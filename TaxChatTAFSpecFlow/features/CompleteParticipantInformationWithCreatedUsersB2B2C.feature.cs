// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaxChatTAFSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Complete participant information with users previously created for B2B2C")]
    public partial class CompleteParticipantInformationWithUsersPreviouslyCreatedForB2B2CFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "CompleteParticipantInformationWithCreatedUsersB2B2C.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Complete participant information with users previously created for B2B2C", "\tIn order to complete the entire participant information\r\n\tAs a partipant user\r\n\t" +
                    "I want to upload all the required files and fill out the profile information on " +
                    "particpant page", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Complete participant information with users previously created for B2B2C users")]
        [NUnit.Framework.CategoryAttribute("completeParticipantInformationWithCreatedUsers")]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat10139@globant.com", "Abcd1234GLB", "Yes", "No", "No", "Yes", "Married", "Yes", "Yes", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat37174@globant.com", "Abcd1234GLB", "Yes", "No", "No", "Yes", "Widowed", "I_did_not_have_any_distributions", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat61197@globant.com", "Abcd1234GLB", "Yes", "No", "No", "No", "Divorced", "No", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat22434@globant.com", "Abcd1234GLB", "Yes", "No", "No", "No", "Divorced", "No", "No", "Yes", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat71026@globant.com", "Abcd1234GLB", "Yes", "No", "No", "No", "Married", "Yes", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat14270@globant.com", "Abcd1234GLB", "Yes", "No", "No", "No", "No_change", "No", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat61981@globant.com", "Abcd1234GLB", "No", "No", "Yes", "Yes", "Married", "Yes", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat71909@globant.com", "Abcd1234GLB", "Yes", "No", "Yes", "No", "No_change", "No", "No", "No", "Yes", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat97944@globant.com", "Abcd1234GLB", "No", "No", "Yes", "No", "No_change", "No", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat89582@globant.com", "Abcd1234GLB", "No", "No", "Yes", "No", "No_change", "No", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat08078@globant.com", "Abcd1234GLB", "No", "No", "Yes", "No", "No_change", "No", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat29095@globant.com", "Abcd1234GLB", "No", "No", "Yes", "No", "No_change", "No", "No", "No", "No", null)]
        [NUnit.Framework.TestCaseAttribute("lf.martinez+taxchat48233@globant.com", "Abcd1234GLB", "No", "No", "Yes", "No", "No_change", "No", "No", "No", "No", null)]
        public virtual void CompleteParticipantInformationWithUsersPreviouslyCreatedForB2B2CUsers(string email, string password, string isMarriedOnBoarding, string spouseNotSsn, string isMarriedDependent, string markCompleteOptions, string maritalStatus, string hadDistributions, string directAndsameBankAccount, string checkMailedAndDirect, string isRandomUploadFile, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "completeParticipantInformationWithCreatedUsers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Complete participant information with users previously created for B2B2C users", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 8
 testRunner.Given(string.Format("The user have entered into participant page with a created user {0} {1}", email, password), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 9
 testRunner.When(string.Format("He enters into upload documents option with an user created to upload all require" +
                            "d files {0}", isRandomUploadFile), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table19 = new TechTalk.SpecFlow.Table(new string[] {
                            "typeDependent",
                            "firstNameDependent",
                            "lastNameDependent",
                            "dateOfBirth",
                            "ssn",
                            "dependentNotSsn",
                            "isMarriedOnBoarding",
                            "spouseNotSsn",
                            "isMarriedDependent",
                            "markCompleteOptions",
                            "maritalStatus",
                            "hadDistributions",
                            "directAndsameBankAccount",
                            "checkMailedAndDirect",
                            "isRandomUploadFile",
                            "isB2B2CUser",
                            "isCreatedUser"});
                table19.AddRow(new string[] {
                            "son",
                            "Jhon",
                            "Kent",
                            "December,7,1962",
                            "123456789",
                            "Yes",
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", spouseNotSsn),
                            string.Format("{0}", isMarriedDependent),
                            string.Format("{0}", markCompleteOptions),
                            string.Format("{0}", maritalStatus),
                            string.Format("{0}", hadDistributions),
                            string.Format("{0}", directAndsameBankAccount),
                            string.Format("{0}", checkMailedAndDirect),
                            string.Format("{0}", isRandomUploadFile),
                            "Yes",
                            "Yes"});
#line 10
 testRunner.Then("Is validated and fill out all the information on the profile section", ((string)(null)), table19, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
