// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace TaxChatTAFSpecFlow.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Validate the correct functionality of referral code for fixed, percentage or flat" +
        " type by tile")]
    public partial class ValidateTheCorrectFunctionalityOfReferralCodeForFixedPercentageOrFlatTypeByTileFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "ValidateReferralCodeByTile.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Validate the correct functionality of referral code for fixed, percentage or flat" +
                    " type by tile", "\tIn order to validate the referral code functionality\r\n\tAs a partipant user\r\n\tI w" +
                    "ant to validate the referral code functionality for fixed and percentage type", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate when is enter an invalid referral code")]
        [NUnit.Framework.CategoryAttribute("invalidReferralCode")]
        [NUnit.Framework.TestCaseAttribute("Yes", "Bernie", "Jackson", "1", "No", "0", "199", "No", "taxchatglbtesting1+sub_pd_@gmail.com", "No", "TAXCHAT202", null)]
        public virtual void ValidateWhenIsEnterAnInvalidReferralCode(string isB2B2CUser, string name, string lastName, string tile, string internalOption, string input, string expectedQuote, string isValidationSpigotGroup, string emailPattern, string isValidationTileByParts, string discountCode, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "invalidReferralCode"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate when is enter an invalid referral code", null, @__tags);
#line 7
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table79 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "lastName",
                            "tile",
                            "internalOption",
                            "input",
                            "emailPattern"});
                table79.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", emailPattern)});
#line 8
 testRunner.Given("The user have entered into onboarding option to validate the referral code option" +
                        "", ((string)(null)), table79, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table80 = new TechTalk.SpecFlow.Table(new string[] {
                            "discountCode"});
                table80.AddRow(new string[] {
                            string.Format("{0}", discountCode)});
#line 11
 testRunner.When("Is entered an invalid referral code", ((string)(null)), table80, "When ");
#line hidden
#line 14
 testRunner.Then("Is validated that appear the correct message", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate the correct application of discount when user enters a referral code by " +
            "selected tile")]
        [NUnit.Framework.CategoryAttribute("validateReferralCodeByTile")]
        [NUnit.Framework.TestCaseAttribute("Yes", "Edward", "Pierce", "1", "No", "0", "199", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", "Globant2020", "20", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Mariah", "Carey", "2", "", "", "224", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+sub_pd_@globant.com", "No", "No", "PP2025", "", "25", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Thomas", "Mottola", "3", "", "1", "319", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+champ_cc_@globant.com", "No", "No", "Championed2020", "66", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Simon", "Fuller", "4", "", "", "349", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+champ_cc_@globant.com", "No", "No", "PP2035", "", "30", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Nicolas", "Cappola", "5", "", "2", "229", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+champ_cc_@globant.com", "No", "No", "FLAT2022", "", "", "50", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Patricia", "Arquette", "6", "Investment income through US", "", "199", "Silver", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+champ_cc_@globant.com", "No", "No", "Championed2020", "66", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Donald", "Trump", "10", "purchase", "", "249", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+champ_cc_@globant.com", "No", "No", "FLAT2022", "", "", "50", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Edward", "Allen", "6", "Direct investment in a foreign corporation or partnership", "", "1199", "Platinum", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+champ_cc_@globant.com", "No", "No", "Globant2020", "1000", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "Janet", "Damita", "4,5,6", "No", "1", "2314", "Platinum", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+champ_cc_@globant.com", "Yes", "No", "Globant2020", "1000", "", "", "", null)]
        [NUnit.Framework.TestCaseAttribute("Yes", "John", "Martin", "1,2,3", "No", "1", "619", "Gold", "Yes", "Yes", "Yes", "Yes", "No", "lf.martinez+champ_cc_@globant.com", "Yes", "No", "Globant2020", "1000", "", "", "No", null)]
        public virtual void ValidateTheCorrectApplicationOfDiscountWhenUserEntersAReferralCodeBySelectedTile(
                    string isB2B2CUser, 
                    string name, 
                    string lastName, 
                    string tile, 
                    string internalOption, 
                    string input, 
                    string expectedQuote, 
                    string complexityExpected, 
                    string consentAditionalQuestion, 
                    string consentMarried, 
                    string consentFinantialReport, 
                    string consentReportableTransaction, 
                    string isValidationSpigotGroup, 
                    string emailPattern, 
                    string isValidationTileByParts, 
                    string isMarriedOnBoarding, 
                    string discountCode, 
                    string discountFixed, 
                    string discountPercentage, 
                    string discountFlat, 
                    string showQuotePage, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validateReferralCodeByTile"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate the correct application of discount when user enters a referral code by " +
                    "selected tile", null, @__tags);
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table81 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "lastName",
                            "tile",
                            "internalOption",
                            "input",
                            "emailPattern",
                            "discountCode"});
                table81.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", emailPattern),
                            string.Format("{0}", discountCode)});
#line 22
 testRunner.Given("The user have entered into onboarding option", ((string)(null)), table81, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table82 = new TechTalk.SpecFlow.Table(new string[] {
                            "tile",
                            "internalOption",
                            "input",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts"});
                table82.AddRow(new string[] {
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts)});
#line 25
 testRunner.When("He fills out the fields related to tax situation", ((string)(null)), table82, "When ");
#line hidden
                TechTalk.SpecFlow.Table table83 = new TechTalk.SpecFlow.Table(new string[] {
                            "consentAditionalQuestion",
                            "consentMarried",
                            "consentFinantialReport",
                            "consentReportableTransaction",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts",
                            "isMarriedOnBoarding",
                            "discountFixed",
                            "discountPercentage",
                            "discountFlat",
                            "showQuotePage"});
                table83.AddRow(new string[] {
                            string.Format("{0}", consentAditionalQuestion),
                            string.Format("{0}", consentMarried),
                            string.Format("{0}", consentFinantialReport),
                            string.Format("{0}", consentReportableTransaction),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts),
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", discountFixed),
                            string.Format("{0}", discountPercentage),
                            string.Format("{0}", discountFlat),
                            string.Format("{0}", showQuotePage)});
#line 28
 testRunner.And(string.Format("He fills out the fields in user creation page with the name {0} the lastname {1} " +
                            "the expectedquote {2} and depends of user {3} with the following consents", name, lastName, expectedQuote, isB2B2CUser), ((string)(null)), table83, "And ");
#line hidden
#line 31
 testRunner.And(string.Format("He confirms the e-mail sent with the email, the name {0} and the lastname {1} for" +
                            " the type of user {2}", name, lastName, isB2B2CUser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 32
 testRunner.And("The user have entered into participant page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 33
 testRunner.And(string.Format("The preparer searches the participant user and validates the complexity with the " +
                            "email preparer, the pass preparer and the name {0}", lastName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table84 = new TechTalk.SpecFlow.Table(new string[] {
                            "complexityExpected"});
                table84.AddRow(new string[] {
                            string.Format("{0}", complexityExpected)});
#line 34
 testRunner.Then("The user should see the correct complexity", ((string)(null)), table84, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Validate the correct application of discount when user enters a referral code by " +
            "selected tile for B2C users")]
        [NUnit.Framework.CategoryAttribute("validateReferralCodeByTileForB2CUsers")]
        [NUnit.Framework.TestCaseAttribute("No", "Edward", "Pierce", "1", "No", "0", "199", "Bronze", "Yes", "Yes", "Yes", "Yes", "No", "taxchatglbtesting1+taxchat@gmail.com", "No", "No", "PP2040", "", "40", "", "", "No", null)]
        public virtual void ValidateTheCorrectApplicationOfDiscountWhenUserEntersAReferralCodeBySelectedTileForB2CUsers(
                    string isB2B2CUser, 
                    string name, 
                    string lastName, 
                    string tile, 
                    string internalOption, 
                    string input, 
                    string expectedQuote, 
                    string complexityExpected, 
                    string consentAditionalQuestion, 
                    string consentMarried, 
                    string consentFinantialReport, 
                    string consentReportableTransaction, 
                    string isValidationSpigotGroup, 
                    string emailPattern, 
                    string isValidationTileByParts, 
                    string isMarriedOnBoarding, 
                    string discountCode, 
                    string discountFixed, 
                    string discountPercentage, 
                    string discountFlat, 
                    string showQuotePage, 
                    string isLicenseDriver, 
                    string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "validateReferralCodeByTileForB2CUsers"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate the correct application of discount when user enters a referral code by " +
                    "selected tile for B2C users", null, @__tags);
#line 52
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
                TechTalk.SpecFlow.Table table85 = new TechTalk.SpecFlow.Table(new string[] {
                            "name",
                            "lastName",
                            "tile",
                            "internalOption",
                            "input",
                            "emailPattern",
                            "discountCode"});
                table85.AddRow(new string[] {
                            string.Format("{0}", name),
                            string.Format("{0}", lastName),
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", emailPattern),
                            string.Format("{0}", discountCode)});
#line 53
 testRunner.Given("The user have entered into onboarding option", ((string)(null)), table85, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table86 = new TechTalk.SpecFlow.Table(new string[] {
                            "tile",
                            "internalOption",
                            "input",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts"});
                table86.AddRow(new string[] {
                            string.Format("{0}", tile),
                            string.Format("{0}", internalOption),
                            string.Format("{0}", input),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts)});
#line 56
 testRunner.When("He fills out the fields related to tax situation", ((string)(null)), table86, "When ");
#line hidden
                TechTalk.SpecFlow.Table table87 = new TechTalk.SpecFlow.Table(new string[] {
                            "consentAditionalQuestion",
                            "consentMarried",
                            "consentFinantialReport",
                            "consentReportableTransaction",
                            "isValidationSpigotGroup",
                            "isValidationTileByParts",
                            "isMarriedOnBoarding",
                            "discountFixed",
                            "discountPercentage",
                            "discountFlat",
                            "showQuotePage"});
                table87.AddRow(new string[] {
                            string.Format("{0}", consentAditionalQuestion),
                            string.Format("{0}", consentMarried),
                            string.Format("{0}", consentFinantialReport),
                            string.Format("{0}", consentReportableTransaction),
                            string.Format("{0}", isValidationSpigotGroup),
                            string.Format("{0}", isValidationTileByParts),
                            string.Format("{0}", isMarriedOnBoarding),
                            string.Format("{0}", discountFixed),
                            string.Format("{0}", discountPercentage),
                            string.Format("{0}", discountFlat),
                            string.Format("{0}", showQuotePage)});
#line 59
 testRunner.And(string.Format("He fills out the fields in user creation page with the name {0} the lastname {1} " +
                            "the expectedquote {2} and depends of user {3} with the following consents", name, lastName, expectedQuote, isB2B2CUser), ((string)(null)), table87, "And ");
#line hidden
#line 62
 testRunner.And(string.Format("He confirms the e-mail sent with the email, the name {0} and the lastname {1} for" +
                            " the type of user {2}", name, lastName, isB2B2CUser), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 63
 testRunner.And("The user have entered into participant page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 64
 testRunner.And(string.Format("The user uploads the required documents depends on the type {0}", isLicenseDriver), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 65
 testRunner.And("The user manage the profile information on the participant page and it is complet" +
                        "ed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 66
 testRunner.And(string.Format("The preparer searches the participant user and validates the complexity with the " +
                            "email preparer, the pass preparer and the name {0}", lastName), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table88 = new TechTalk.SpecFlow.Table(new string[] {
                            "complexityExpected"});
                table88.AddRow(new string[] {
                            string.Format("{0}", complexityExpected)});
#line 67
 testRunner.Then("The user should see the correct complexity", ((string)(null)), table88, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
